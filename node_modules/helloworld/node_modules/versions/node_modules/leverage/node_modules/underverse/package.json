{
  "name": "underverse",
  "version": "0.1.1",
  "description": "underverse is simple backlog management and administration module",
  "main": "index.js",
  "scripts": {
    "test": "NODE_ENV=testing ./node_modules/.bin/mocha $(find test -name '*.test.js')"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/observing/underverse.git"
  },
  "keywords": [
    "backlog",
    "messaging",
    "queue",
    "management"
  ],
  "author": {
    "name": "Arnout Kazemier",
    "email": "opensource@observe.it"
  },
  "license": "MIT",
  "devDependencies": {
    "pre-commit": "0.0.x",
    "mocha": "1.10.x",
    "chai": "1.6.x"
  },
  "readme": "# Underverse\n\nUnderverse is a small backlog/queue manager that detects when items in your\nbacklog are out of sync and issues a fetch event to retrieve the missing items.\nThis module makes the following assumptions about your backlog of data:\n\n- The backlog works with a bag of a ids.\n- The ids a nummeric which equals the position of the backlog.\n- The ids are ordered.\n- The backlog has limit.\n- The backlog resets it's ids once the limit is reached.\n\n### Build status\n\n[![Build Status](https://travis-ci.org/observing/underverse.png)](https://travis-ci.org/observing/underverse)\n\n### Installation\n\nThe installation is done through `npm`\n\n```\nnpm install underverse --save\n```\n\nAdd the `--save` if you want to save the module in your `package.json`.\n\n### Usage\n\nThe module is initialized with the size of the `backlog`;\n\n```js\nvar Underverse = require('underverse')\n  , uv = new Underverse(1000);\n```\n\nThe snippet above creates a new `underverse` that works with a backlog that\ncan contain `1000` items. You should set the initial id of log. For example if\nyour queue is filled with 100/10000 slots:\n\n```js\nuv.cursor(100);\n```\n\nAs it could be possible that your messages get out of sync if you use a remote\nbacklog (for example a reconnect) you can listen to the `fetch` event to know\nwhich ids are missing.\n\n```\nuv.on('fetch', function (missing, mark) {\n\n})\n```\n\nThe `fetch` event receives 2 arguments, an array of missing id and a `mark`\nfunction. The mark function allows you set all ids in to a `fetching` state so\nyou won't retrieve duplicate fetch calls that retrieve the same information. If\nyou call the `mark` function with a boolean `true` it will mark all missing\nids as `received`.\n\nWhen you have received a message from your backlog call the `uv.received()`\nmethod with the id.\n\n```js\nuv.received(10)\n```\n\nand that's it. Take a look at the tests for some examples.\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/observing/underverse/issues"
  },
  "homepage": "https://github.com/observing/underverse",
  "_id": "underverse@0.1.1",
  "_from": "underverse@0.1.x"
}
